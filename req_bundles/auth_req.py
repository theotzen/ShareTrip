"""
@theotzenRequestBundleGenerator
This file is autogenerated from FastAPI routers
"""

import httpx
import os
from dotenv import load_dotenv
from fastapi import HTTPException
from fastapi.encoders import jsonable_encoder
from app.core.log_config import init_loggers

loggerIH = init_loggers(__name__)

load_dotenv()

base_url = os.getenv(__name__)

client = httpx.AsyncClient()


async def create_user(data: dict, cookies: dict = None, base_url: str = base_url, endpoint: str = '/api/auth/register'):
	try: 
		res = await client.post(url=base_url+endpoint, json=jsonable_encoder(data), cookies=cookies)
		if res.status_code >= 300:
			raise HTTPException(status_code=res.status_code) 
	except httpx.HTTPError as err: 
		raise SystemExit(err)
	return res.json()


async def login(data: dict, cookies: dict = None, base_url: str = base_url, endpoint: str = '/api/auth/login'):
	try: 
		res = await client.post(url=base_url+endpoint, json=jsonable_encoder(data), cookies=cookies)
		if res.status_code >= 300:
			raise HTTPException(status_code=res.status_code) 
	except httpx.HTTPError as err: 
		raise SystemExit(err)
	return res.json()


async def refresh_token(cookies: dict = None, base_url: str = base_url, endpoint: str = '/api/auth/refresh'):
	try: 
		res = await client.get(url=base_url+endpoint) 
	except httpx.HTTPError as err: 
		raise SystemExit(err)
	return res.json()


async def logout(cookies: dict = None, base_url: str = base_url, endpoint: str = '/api/auth/logout'):
	try: 
		res = await client.get(url=base_url+endpoint) 
	except httpx.HTTPError as err: 
		raise SystemExit(err)
	return res.json()


async def get_all_users(cookies: dict = None, base_url: str = base_url, endpoint: str = '/api/auth/getAllUsers'):
	try: 
		res = await client.get(url=base_url+endpoint) 
	except httpx.HTTPError as err: 
		raise SystemExit(err)
	return res.json()


async def test_trajet(cookies: dict = None, base_url: str = base_url, endpoint: str = '/api/auth/testTrajet'):
	try: 
		res = await client.get(url=base_url+endpoint) 
	except httpx.HTTPError as err: 
		raise SystemExit(err)
	return res.json()


async def test_post_trajet(data: dict, cookies: dict = None, base_url: str = base_url, endpoint: str = '/api/auth/testPostTrajet'):
	try: 
		res = await client.post(url=base_url+endpoint, json=jsonable_encoder(data), cookies=cookies)
		if res.status_code >= 300:
			raise HTTPException(status_code=res.status_code) 
	except httpx.HTTPError as err: 
		raise SystemExit(err)
	return res.json()